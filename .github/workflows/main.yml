name: Rails
on: push

jobs:
  verify:
    name: Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11
        env:
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres
          # POSTGRES_USER: lightning_marine_services
          # # POSTGRES_DB: lightning_marine_services_test
          # POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # if you need redis
      # redis:
      #   image: redis
      #   ports:
      #   - 6379:6379
      #   options: --entrypoint redis-server

      elasticsearch:
        image: elasticsearch:6.8.3
        ports:
        - 9200/tcp
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # - uses: actions/checkout@v1

      - name: Set up Ruby -v 3.0.3
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 3.0.3

      - name: Set up Node -v 10.13.0
        uses: actions/setup-node@v1
        with:
          node-version: 10.13.0

      - name: Verify Elasticsearch connection from host
        env:
          ELASTIC_SEARCH_URL: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        run: |
          echo $ELASTIC_SEARCH_URL
          curl -fsSL "$ELASTIC_SEARCH_URL/_cat/health?h=status"
        # uses: ankane/setup-elasticsearch@v1
        # with:
        #   elasticsearch-version: 8

      - name: Bundle Install and Create DB
        env:
          DATABASE_URL: postgres://postgres:@localhost:5432/test
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler:1.17.3
          bundle install --jobs 4 --retry 3
          bin/rails db:prepare
        # bin/rails db:setup

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:@localhost:5432/test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # REDIS_PORT: ${{ job.services.redis.ports[6379] }}
          ELASTIC_SEARCH_URL: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        run: |
          bundle exec rake searchkick:reindex:all
          RAILS_ENV=test bundle exec rake
          rspec spec


        #   DB_PASSWORD: root
        #   DB_PORT: ${{ job.services.mysql.ports[3306] }} # get randomly assigned published port
        #   REDIS_PORT: ${{ job.services.redis.ports[6379] }}
        #   ELASTIC_SEARCH_URL: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        #   RAILS_ENV: test
        #   # You need to set API tokens in GitHub repository Settings -> Secrets
        #   KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC }}
        #   KNAPSACK_PRO_TEST_SUITE_TOKEN_CUCUMBER: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_CUCUMBER }}
        #   KNAPSACK_PRO_TEST_SUITE_TOKEN_MINITEST: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_MINITEST }}
        #   KNAPSACK_PRO_TEST_SUITE_TEST_UNIT: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_TEST_UNIT }}
        #   KNAPSACK_PRO_TEST_SUITE_TOKEN_SPINACH: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_SPINACH }}
        #   KNAPSACK_PRO_CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
        #   KNAPSACK_PRO_CI_NODE_INDEX: ${{ matrix.ci_node_index }}
        #   # if you use Knapsack Pro Queue Mode you must set below env variable
        #   # to be able to retry CI build and run previously recorded tests
        #   KNAPSACK_PRO_FIXED_QUEUE_SPLIT: true
        # run: |
        #   # run tests in Knapsack Pro Regular Mode
        #   bundle exec rake knapsack_pro:rspec
        #   bundle exec rake knapsack_pro:cucumber
        #   bundle exec rake knapsack_pro:minitest
        #   bundle exec rake knapsack_pro:test_unit
        #   bundle exec rake knapsack_pro:spinach
        #   # you can use Knapsack Pro in Queue Mode once recorded first CI build with Regular Mode
        #   bundle exec rake knapsack_pro:queue:rspec
        #   bundle exec rake knapsack_pro:queue:cucumber
        #   bundle exec rake knapsack_pro:queue:minitest


      # - name: Bundle install gems and dependencies
      #   run: |
      #     sudo apt-get -yqq install libpq-dev
      #     gem install bundler
      #     bundle install --jobs 4 --retry 3



      # - name: Create/Prepare Test DB
      #   env:
      #     DATABASE_URL: postgres://postgres:@localhost:5432/test
      #     RAILS_ENV: test
      #     POSTGRES_USER: postgres
      #     POSTGRES_PASSWORD: postgres
      #   run: |
      #     bundle exec rails db:create
      #     bundle exec rails db:migrate
      #     bundle exec rake searchkick:reindex:all
      #     RAILS_ENV=test bundle exec rake
      # # RAILS_ENV=test bundle exec rails db:create
      # # RAILS_ENV=test bundle exec rails db:migrate
      # # RAILS_ENV=test bundle exec rake
      # # RAILS_ENV=test bundle exec rake searchkick:reindex:all


      # - name: Prepare ElasticSearch and Searchkick
      #   run: bundle exec rake searchkick:reindex:all


      # - name: Run Tests
      #   run: bundle exec rspec spec


      # - name: Build and run tests
      #   env:
      #     DATABASE_URL: postgres://postgres:@localhost:5432/test
      #     RAILS_ENV: test
      #     POSTGRES_USER: postgres
      #     POSTGRES_PASSWORD: postgres
      #   run: |
      #     sudo apt-get -yqq install libpq-dev
      #     gem install bundler:1.17.3
      #     bundle install --jobs 4 --retry 3
      #     bundle exec rails db:create
      #     bundle exec rails db:migrate
      #     bundle exec rake searchkick:reindex:all
      #     RAILS_ENV=test bundle exec rake
